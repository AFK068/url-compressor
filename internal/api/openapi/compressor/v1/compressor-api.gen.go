// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// AddUrlRequest defines model for AddUrlRequest.
type AddUrlRequest struct {
	Url *string `json:"url,omitempty"`
}

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	Code             *string `json:"code,omitempty"`
	Description      *string `json:"description,omitempty"`
	ExceptionMessage *string `json:"exceptionMessage,omitempty"`
}

// UrlResponse defines model for UrlResponse.
type UrlResponse struct {
	Url *string `json:"url,omitempty"`
}

// GetUrlParams defines parameters for GetUrl.
type GetUrlParams struct {
	ShortUrl string `form:"short-url" json:"short-url"`
}

// PostUrlJSONRequestBody defines body for PostUrl for application/json ContentType.
type PostUrlJSONRequestBody = AddUrlRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get original URL by short URL
	// (GET /url)
	GetUrl(ctx echo.Context, params GetUrlParams) error
	// Post original URL
	// (POST /url)
	PostUrl(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUrl converts echo context to params.
func (w *ServerInterfaceWrapper) GetUrl(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUrlParams
	// ------------- Required query parameter "short-url" -------------

	err = runtime.BindQueryParameter("form", true, true, "short-url", ctx.QueryParams(), &params.ShortUrl)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter short-url: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUrl(ctx, params)
	return err
}

// PostUrl converts echo context to params.
func (w *ServerInterfaceWrapper) PostUrl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUrl(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/url", wrapper.GetUrl)
	router.POST(baseURL+"/url", wrapper.PostUrl)

}
