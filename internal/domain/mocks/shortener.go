// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Shortener is an autogenerated mock type for the Shortener type
type Shortener struct {
	mock.Mock
}

type Shortener_Expecter struct {
	mock *mock.Mock
}

func (_m *Shortener) EXPECT() *Shortener_Expecter {
	return &Shortener_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: str
func (_m *Shortener) Decode(str string) (uint64, error) {
	ret := _m.Called(str)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uint64, error)); ok {
		return rf(str)
	}
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(str)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(str)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shortener_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type Shortener_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - str string
func (_e *Shortener_Expecter) Decode(str interface{}) *Shortener_Decode_Call {
	return &Shortener_Decode_Call{Call: _e.mock.On("Decode", str)}
}

func (_c *Shortener_Decode_Call) Run(run func(str string)) *Shortener_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Shortener_Decode_Call) Return(_a0 uint64, _a1 error) *Shortener_Decode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Shortener_Decode_Call) RunAndReturn(run func(string) (uint64, error)) *Shortener_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: num
func (_m *Shortener) Encode(num uint64) (string, error) {
	ret := _m.Called(num)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (string, error)); ok {
		return rf(num)
	}
	if rf, ok := ret.Get(0).(func(uint64) string); ok {
		r0 = rf(num)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shortener_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type Shortener_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - num uint64
func (_e *Shortener_Expecter) Encode(num interface{}) *Shortener_Encode_Call {
	return &Shortener_Encode_Call{Call: _e.mock.On("Encode", num)}
}

func (_c *Shortener_Encode_Call) Run(run func(num uint64)) *Shortener_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *Shortener_Encode_Call) Return(_a0 string, _a1 error) *Shortener_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Shortener_Encode_Call) RunAndReturn(run func(uint64) (string, error)) *Shortener_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// NewShortener creates a new instance of Shortener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShortener(t interface {
	mock.TestingT
	Cleanup(func())
}) *Shortener {
	mock := &Shortener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
