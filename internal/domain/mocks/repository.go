// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetURL provides a mock function with given fields: ctx, shortenedURL
func (_m *Repository) GetURL(ctx context.Context, shortenedURL string) (string, error) {
	ret := _m.Called(ctx, shortenedURL)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, shortenedURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortenedURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortenedURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type Repository_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
//   - ctx context.Context
//   - shortenedURL string
func (_e *Repository_Expecter) GetURL(ctx interface{}, shortenedURL interface{}) *Repository_GetURL_Call {
	return &Repository_GetURL_Call{Call: _e.mock.On("GetURL", ctx, shortenedURL)}
}

func (_c *Repository_GetURL_Call) Run(run func(ctx context.Context, shortenedURL string)) *Repository_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetURL_Call) Return(_a0 string, _a1 error) *Repository_GetURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Repository_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// SaveURL provides a mock function with given fields: ctx, originalURL
func (_m *Repository) SaveURL(ctx context.Context, originalURL string) (string, error) {
	ret := _m.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for SaveURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, originalURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_SaveURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveURL'
type Repository_SaveURL_Call struct {
	*mock.Call
}

// SaveURL is a helper method to define mock.On call
//   - ctx context.Context
//   - originalURL string
func (_e *Repository_Expecter) SaveURL(ctx interface{}, originalURL interface{}) *Repository_SaveURL_Call {
	return &Repository_SaveURL_Call{Call: _e.mock.On("SaveURL", ctx, originalURL)}
}

func (_c *Repository_SaveURL_Call) Run(run func(ctx context.Context, originalURL string)) *Repository_SaveURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_SaveURL_Call) Return(_a0 string, _a1 error) *Repository_SaveURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_SaveURL_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Repository_SaveURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
